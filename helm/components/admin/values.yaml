global:
  # indicates enabling use of DNS hostnames via Ingress
  # switch to indicate use of domain configuration
  dnsEnabled: &dnsEnabled false

  # Type to expose UI services with
  # Supported: ingress / loadbalancer
  serviceExposure:
    type: "ingress"

  # Ingress claas to be defined to inngress configuration when using Ingress controller
  # Only used when supports Nginx Ingress Controller
  # Only used when global.serviceExposure.type==ingress
  ingressClass: &ingressClass "nginx"

  # repository from where the controller images are pulled for
  # controller
  repository: &repository coredgeio

  # this field is considered only when UseDailyBuilds is set to be false
  # provides configuration of build tag to be used for container images
  releaseTag: &releaseTag latest

  # image pull policy to be used
  imagePullPolicy: &imagePolicy Always

  # external IP for controller, relevant, when domain is not
  # configured to allow generation of server certificate validity using
  # this IP address
  externalIP: &controllerIP 127.0.0.1

  # Flask Config (Development OR Production)
  # TEMPORARY
  flaskConfig: "production"

  # keycloak realm to be used as the root
  rootRealm: &rootRealm "cloud"

  ## Keycloak Architecture override to enable HA or standalone
  keycloak:
    domain: &keycloakDomain ""
    nodePorts:
      http: &keycloakNodePortHTTP "32701"
      https: &keycloakNodePortHTTPS "32702"

nodeSelector: {} 

replicaCount: 1

allowedAdminUserDomain: ""

adminportal:
  image: "fluid-admin"
  service:
    nodePort: "32600"
  resources: 
    limits:
      cpu: 400m
      # memory: 128Mi
    requests:
      cpu: 100m
      memory: 200Mi
  ## Only use when https.enabled is set true
  ## Else leave empty
  ingress:
    tlsSecret: ""
    hostname: ""
  ## Monitoring URLs
  monitoringURL: 
    resource: ""
    projectResource: ""
  ## Management URLs
  managementURL: 
    resource: ""
  ## Enabled Services
  enabledServices: ""

adminPlatform:
  image: "fluid_admin_platform"
  resources: 
    limits:
      cpu: 500m
      # memory: 128Mi
    requests:
      cpu: 100m
      memory: 200Mi
  celery:
    enabled: true
    replicaCount: 1
    command: "celery -A app.celery worker --loglevel=INFO -B"
    resources: 
      limits:
        cpu: 1000m
        memory: 6Gi
      requests:
        cpu: 100m
        memory: 2Gi
  