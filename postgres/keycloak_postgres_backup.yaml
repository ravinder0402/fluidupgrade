---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: keycloak-postgress-backup-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: keycloak-postgres-backup
spec:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - args:
              - -ec
              # the script wait untill the snapshot file is available
              # then upload to s3
              # for folks using non-aws S3 like IBM Cloud Object Storage service, add a `--endpoint-url` option
              # run `aws --endpoint-url <https://your_s3_endpoint> s3 cp ...`
              # change the s3://<path> to your desired location
              - |
                # set variables for filename
                cd /backups
                filename=$(ls pg-*.sql.gz | tail -n 1)
          
                # Upload file to S3 bucket
                /s5cmd  cp ${filename} s3://$S3_BUCKET/$S3_PREFIX/keycloak-postgres/${filename}              
                
                # List all files in the bucket
                file_list=$(/s5cmd ls s3://$S3_BUCKET/$S3_PREFIX/keycloak-postgres/ | awk '{print $NF}')
                
                # Count the number of files in the bucket
                file_count=$(echo "${file_list}" | wc -l)
                
                # If there are more than RETAIN_COUNT files, delete the oldest ones
                if [ "${file_count}" -gt "$RETAIN_COUNT" ]; then
                  files_to_delete=$((file_count - $RETAIN_COUNT))
                  echo "Deleting ${files_to_delete} old files..."
                  echo "${file_list}" | head -n "${files_to_delete}" | while read -r file; do
                    echo $ {file}
                    /s5cmd rm "s3://$S3_BUCKET/$S3_PREFIX/keycloak-postgres/${file}"
                  done
                fi
                
                #If there are more than RETAIN_COUNT files, delete the oldest ones for pv
                
                find /backups/* -mtime +3 -exec rm -f {} \; 2> /dev/null                 
                
            command:
            - /bin/sh
            env:
            - name: S3_PREFIX
              valueFrom:
                secretKeyRef:
                  name: s3-credentials
                  key: S3_PREFIX            
            - name: RETAIN_COUNT
              value: "15"
            - name: S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: s3-credentials
                  key: S3_BUCKET
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: s3-credentials
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: s3-credentials
                  key: AWS_SECRET_ACCESS_KEY
            - name: S3_ENDPOINT_URL
              valueFrom:
                secretKeyRef:
                  name: s3-credentials
                  key: S3_ENDPOINT_URL
            image: peakcom/s5cmd
            imagePullPolicy: IfNotPresent
            name: upload
            volumeMounts:
            - mountPath: /backups
              name: backup-volume
          initContainers:
          - args:
            - |
              BACKUP_FILE=/backups/pg-keycloak-$(date +"%Y-%m-%d-%H-%M-%S").sql.gz
              PGPASSWORD=$PGPASSWORD pg_dump -cC -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DATABASE | gzip > $BACKUP_FILE
            command:
            - /bin/sh
            - -c
            env:
            - name: POSTGRES_DATABASE
              value: "keycloak"
            - name: POSTGRES_HOST
              value: "keycloak-postgresql-cluster"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: keycloak.keycloak-postgresql-cluster.credentials.postgresql.acid.zalan.do
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: keycloak.keycloak-postgresql-cluster.credentials.postgresql.acid.zalan.do
            image: docker.io/postgres:15.7
            imagePullPolicy: IfNotPresent
            name: pg-dump
            volumeMounts:
            - mountPath: /backups
              name: backup-volume
          restartPolicy: OnFailure
          volumes:
          - name: backup-volume
            persistentVolumeClaim:
              claimName: keycloak-postgress-backup-pvc
  schedule: 0 0 * * *
