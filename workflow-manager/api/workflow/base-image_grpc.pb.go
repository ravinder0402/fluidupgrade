// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BaseImageApiClient is the client API for BaseImageApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseImageApiClient interface {
	// List of available base images
	ListBaseImages(ctx context.Context, in *BaseImagesListReq, opts ...grpc.CallOption) (*BaseImagesListResp, error)
	// base image is always added with context of version
	AddBaseImage(ctx context.Context, in *BaseImageAddReq, opts ...grpc.CallOption) (*BaseImageAddResp, error)
	// delete of base image can be triggered only with specific versions
	DeleteBaseImage(ctx context.Context, in *BaseImageDelReq, opts ...grpc.CallOption) (*BaseImageDelResp, error)
	// List of available base images in a project for module creation
	ListProjectBaseImages(ctx context.Context, in *ProjectBaseImagesListReq, opts ...grpc.CallOption) (*BaseImagesListResp, error)
}

type baseImageApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseImageApiClient(cc grpc.ClientConnInterface) BaseImageApiClient {
	return &baseImageApiClient{cc}
}

func (c *baseImageApiClient) ListBaseImages(ctx context.Context, in *BaseImagesListReq, opts ...grpc.CallOption) (*BaseImagesListResp, error) {
	out := new(BaseImagesListResp)
	err := c.cc.Invoke(ctx, "/workflow.BaseImageApi/ListBaseImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseImageApiClient) AddBaseImage(ctx context.Context, in *BaseImageAddReq, opts ...grpc.CallOption) (*BaseImageAddResp, error) {
	out := new(BaseImageAddResp)
	err := c.cc.Invoke(ctx, "/workflow.BaseImageApi/AddBaseImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseImageApiClient) DeleteBaseImage(ctx context.Context, in *BaseImageDelReq, opts ...grpc.CallOption) (*BaseImageDelResp, error) {
	out := new(BaseImageDelResp)
	err := c.cc.Invoke(ctx, "/workflow.BaseImageApi/DeleteBaseImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseImageApiClient) ListProjectBaseImages(ctx context.Context, in *ProjectBaseImagesListReq, opts ...grpc.CallOption) (*BaseImagesListResp, error) {
	out := new(BaseImagesListResp)
	err := c.cc.Invoke(ctx, "/workflow.BaseImageApi/ListProjectBaseImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseImageApiServer is the server API for BaseImageApi service.
// All implementations must embed UnimplementedBaseImageApiServer
// for forward compatibility
type BaseImageApiServer interface {
	// List of available base images
	ListBaseImages(context.Context, *BaseImagesListReq) (*BaseImagesListResp, error)
	// base image is always added with context of version
	AddBaseImage(context.Context, *BaseImageAddReq) (*BaseImageAddResp, error)
	// delete of base image can be triggered only with specific versions
	DeleteBaseImage(context.Context, *BaseImageDelReq) (*BaseImageDelResp, error)
	// List of available base images in a project for module creation
	ListProjectBaseImages(context.Context, *ProjectBaseImagesListReq) (*BaseImagesListResp, error)
	mustEmbedUnimplementedBaseImageApiServer()
}

// UnimplementedBaseImageApiServer must be embedded to have forward compatible implementations.
type UnimplementedBaseImageApiServer struct {
}

func (UnimplementedBaseImageApiServer) ListBaseImages(context.Context, *BaseImagesListReq) (*BaseImagesListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBaseImages not implemented")
}
func (UnimplementedBaseImageApiServer) AddBaseImage(context.Context, *BaseImageAddReq) (*BaseImageAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBaseImage not implemented")
}
func (UnimplementedBaseImageApiServer) DeleteBaseImage(context.Context, *BaseImageDelReq) (*BaseImageDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBaseImage not implemented")
}
func (UnimplementedBaseImageApiServer) ListProjectBaseImages(context.Context, *ProjectBaseImagesListReq) (*BaseImagesListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectBaseImages not implemented")
}
func (UnimplementedBaseImageApiServer) mustEmbedUnimplementedBaseImageApiServer() {}

// UnsafeBaseImageApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseImageApiServer will
// result in compilation errors.
type UnsafeBaseImageApiServer interface {
	mustEmbedUnimplementedBaseImageApiServer()
}

func RegisterBaseImageApiServer(s grpc.ServiceRegistrar, srv BaseImageApiServer) {
	s.RegisterService(&BaseImageApi_ServiceDesc, srv)
}

func _BaseImageApi_ListBaseImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseImagesListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseImageApiServer).ListBaseImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.BaseImageApi/ListBaseImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseImageApiServer).ListBaseImages(ctx, req.(*BaseImagesListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseImageApi_AddBaseImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseImageAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseImageApiServer).AddBaseImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.BaseImageApi/AddBaseImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseImageApiServer).AddBaseImage(ctx, req.(*BaseImageAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseImageApi_DeleteBaseImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseImageDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseImageApiServer).DeleteBaseImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.BaseImageApi/DeleteBaseImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseImageApiServer).DeleteBaseImage(ctx, req.(*BaseImageDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseImageApi_ListProjectBaseImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBaseImagesListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseImageApiServer).ListProjectBaseImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.BaseImageApi/ListProjectBaseImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseImageApiServer).ListProjectBaseImages(ctx, req.(*ProjectBaseImagesListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BaseImageApi_ServiceDesc is the grpc.ServiceDesc for BaseImageApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseImageApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.BaseImageApi",
	HandlerType: (*BaseImageApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBaseImages",
			Handler:    _BaseImageApi_ListBaseImages_Handler,
		},
		{
			MethodName: "AddBaseImage",
			Handler:    _BaseImageApi_AddBaseImage_Handler,
		},
		{
			MethodName: "DeleteBaseImage",
			Handler:    _BaseImageApi_DeleteBaseImage_Handler,
		},
		{
			MethodName: "ListProjectBaseImages",
			Handler:    _BaseImageApi_ListProjectBaseImages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base-image.proto",
}
