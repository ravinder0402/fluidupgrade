// Copyright 2024, Coredge.io Inc.
// All Rights reserved.
//
// Author Prabhjot Singh Sethi (prabhjot@coredge.io)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: module.proto

package workflow

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModuleDef_KeyType int32

const (
	// default type as parameter
	ModuleDef_Parameter ModuleDef_KeyType = 0
)

// Enum value maps for ModuleDef_KeyType.
var (
	ModuleDef_KeyType_name = map[int32]string{
		0: "Parameter",
	}
	ModuleDef_KeyType_value = map[string]int32{
		"Parameter": 0,
	}
)

func (x ModuleDef_KeyType) Enum() *ModuleDef_KeyType {
	p := new(ModuleDef_KeyType)
	*p = x
	return p
}

func (x ModuleDef_KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModuleDef_KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_module_proto_enumTypes[0].Descriptor()
}

func (ModuleDef_KeyType) Type() protoreflect.EnumType {
	return &file_module_proto_enumTypes[0]
}

func (x ModuleDef_KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModuleDef_KeyType.Descriptor instead.
func (ModuleDef_KeyType) EnumDescriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{2, 0}
}

type ModuleBuildDef_Status int32

const (
	// init status indicating nothing has started yet
	ModuleBuildDef_Scheduled ModuleBuildDef_Status = 0
	// build has been started
	ModuleBuildDef_InProgress ModuleBuildDef_Status = 1
	// build completed with success
	ModuleBuildDef_Completed ModuleBuildDef_Status = 2
	// build completed with failure
	ModuleBuildDef_Failed ModuleBuildDef_Status = 3
)

// Enum value maps for ModuleBuildDef_Status.
var (
	ModuleBuildDef_Status_name = map[int32]string{
		0: "Scheduled",
		1: "InProgress",
		2: "Completed",
		3: "Failed",
	}
	ModuleBuildDef_Status_value = map[string]int32{
		"Scheduled":  0,
		"InProgress": 1,
		"Completed":  2,
		"Failed":     3,
	}
)

func (x ModuleBuildDef_Status) Enum() *ModuleBuildDef_Status {
	p := new(ModuleBuildDef_Status)
	*p = x
	return p
}

func (x ModuleBuildDef_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModuleBuildDef_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_module_proto_enumTypes[1].Descriptor()
}

func (ModuleBuildDef_Status) Type() protoreflect.EnumType {
	return &file_module_proto_enumTypes[1]
}

func (x ModuleBuildDef_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModuleBuildDef_Status.Descriptor instead.
func (ModuleBuildDef_Status) EnumDescriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{3, 0}
}

type ModuleRequestStatus_Status int32

const (
	// Draft
	ModuleRequestStatus_Draft ModuleRequestStatus_Status = 0
	// Submitted
	ModuleRequestStatus_Submitted ModuleRequestStatus_Status = 1
	// Approved
	ModuleRequestStatus_Approved ModuleRequestStatus_Status = 2
	// Rejected
	ModuleRequestStatus_Rejected ModuleRequestStatus_Status = 3
)

// Enum value maps for ModuleRequestStatus_Status.
var (
	ModuleRequestStatus_Status_name = map[int32]string{
		0: "Draft",
		1: "Submitted",
		2: "Approved",
		3: "Rejected",
	}
	ModuleRequestStatus_Status_value = map[string]int32{
		"Draft":     0,
		"Submitted": 1,
		"Approved":  2,
		"Rejected":  3,
	}
)

func (x ModuleRequestStatus_Status) Enum() *ModuleRequestStatus_Status {
	p := new(ModuleRequestStatus_Status)
	*p = x
	return p
}

func (x ModuleRequestStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModuleRequestStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_module_proto_enumTypes[2].Descriptor()
}

func (ModuleRequestStatus_Status) Type() protoreflect.EnumType {
	return &file_module_proto_enumTypes[2]
}

func (x ModuleRequestStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModuleRequestStatus_Status.Descriptor instead.
func (ModuleRequestStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{9, 0}
}

type ModuleCatalogRequestListReq_FilterStatus int32

const (
	// Open review requests
	ModuleCatalogRequestListReq_Open ModuleCatalogRequestListReq_FilterStatus = 0
	// Closed review requests
	ModuleCatalogRequestListReq_Closed ModuleCatalogRequestListReq_FilterStatus = 1
	// All review requests
	ModuleCatalogRequestListReq_All ModuleCatalogRequestListReq_FilterStatus = 2
)

// Enum value maps for ModuleCatalogRequestListReq_FilterStatus.
var (
	ModuleCatalogRequestListReq_FilterStatus_name = map[int32]string{
		0: "Open",
		1: "Closed",
		2: "All",
	}
	ModuleCatalogRequestListReq_FilterStatus_value = map[string]int32{
		"Open":   0,
		"Closed": 1,
		"All":    2,
	}
)

func (x ModuleCatalogRequestListReq_FilterStatus) Enum() *ModuleCatalogRequestListReq_FilterStatus {
	p := new(ModuleCatalogRequestListReq_FilterStatus)
	*p = x
	return p
}

func (x ModuleCatalogRequestListReq_FilterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModuleCatalogRequestListReq_FilterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_module_proto_enumTypes[3].Descriptor()
}

func (ModuleCatalogRequestListReq_FilterStatus) Type() protoreflect.EnumType {
	return &file_module_proto_enumTypes[3]
}

func (x ModuleCatalogRequestListReq_FilterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModuleCatalogRequestListReq_FilterStatus.Descriptor instead.
func (ModuleCatalogRequestListReq_FilterStatus) EnumDescriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{31, 0}
}

type ModulesListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domain under consideration
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// project under consideration
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// offset for pagination
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// limit for pagination
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// search text
	Search string `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *ModulesListReq) Reset() {
	*x = ModulesListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModulesListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModulesListReq) ProtoMessage() {}

func (x *ModulesListReq) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModulesListReq.ProtoReflect.Descriptor instead.
func (*ModulesListReq) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{0}
}

func (x *ModulesListReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ModulesListReq) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ModulesListReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ModulesListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ModulesListReq) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type ModuleGitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// git repo url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// git reference - branch tag or commit id to use
	GitRef string `protobuf:"bytes,2,opt,name=gitRef,proto3" json:"gitRef,omitempty"`
	// working directory inside the git repository
	WorkingDir string `protobuf:"bytes,3,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
}

func (x *ModuleGitInfo) Reset() {
	*x = ModuleGitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleGitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleGitInfo) ProtoMessage() {}

func (x *ModuleGitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleGitInfo.ProtoReflect.Descriptor instead.
func (*ModuleGitInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{1}
}

func (x *ModuleGitInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ModuleGitInfo) GetGitRef() string {
	if x != nil {
		return x.GitRef
	}
	return ""
}

func (x *ModuleGitInfo) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

type ModuleDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModuleDef) Reset() {
	*x = ModuleDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleDef) ProtoMessage() {}

func (x *ModuleDef) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleDef.ProtoReflect.Descriptor instead.
func (*ModuleDef) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{2}
}

type ModuleBuildDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModuleBuildDef) Reset() {
	*x = ModuleBuildDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleBuildDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleBuildDef) ProtoMessage() {}

func (x *ModuleBuildDef) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleBuildDef.ProtoReflect.Descriptor instead.
func (*ModuleBuildDef) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{3}
}

type InputKeyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// specify type of data to be carried into the key
	// anything which is not a string is expected to be
	// string parseable values like "true" for true
	// "1" instead of 1 etc
	DataType string `protobuf:"bytes,1,opt,name=dataType,proto3" json:"dataType,omitempty"`
	// specify if the key is optional
	Opt bool `protobuf:"varint,2,opt,name=opt,proto3" json:"opt,omitempty"`
	// default value for the input when it is optional
	// provided by the user while defining the input
	// parameter itself
	DefaultVal string `protobuf:"bytes,3,opt,name=defaultVal,proto3" json:"defaultVal,omitempty"`
}

func (x *InputKeyData) Reset() {
	*x = InputKeyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputKeyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputKeyData) ProtoMessage() {}

func (x *InputKeyData) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputKeyData.ProtoReflect.Descriptor instead.
func (*InputKeyData) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{4}
}

func (x *InputKeyData) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *InputKeyData) GetOpt() bool {
	if x != nil {
		return x.Opt
	}
	return false
}

func (x *InputKeyData) GetDefaultVal() string {
	if x != nil {
		return x.DefaultVal
	}
	return ""
}

type OutputKeyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// specify type of data to be carried into the key
	// anything which is not a string is expected to be
	// string parseable values like "true" for true
	// "1" instead of 1 etc
	DataType string `protobuf:"bytes,1,opt,name=dataType,proto3" json:"dataType,omitempty"`
	// where this value will be mapped from the container
	// this will be the file with absolute path in the
	// container, generated by the module as part of
	// execution, which will be exposed as paramter output
	ValueFrom string `protobuf:"bytes,2,opt,name=valueFrom,proto3" json:"valueFrom,omitempty"`
}

func (x *OutputKeyData) Reset() {
	*x = OutputKeyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputKeyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputKeyData) ProtoMessage() {}

func (x *OutputKeyData) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputKeyData.ProtoReflect.Descriptor instead.
func (*OutputKeyData) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{5}
}

func (x *OutputKeyData) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *OutputKeyData) GetValueFrom() string {
	if x != nil {
		return x.ValueFrom
	}
	return ""
}

type ModuleBuildConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base image from which the module will be built
	BaseImage string `protobuf:"bytes,1,opt,name=baseImage,proto3" json:"baseImage,omitempty"`
	// raw script/Dockerfile to build code if repository is not provided. Ignored if git repo is provided
	BuildScript []string `protobuf:"bytes,2,rep,name=buildScript,proto3" json:"buildScript,omitempty"`
	// setting up default environment variables
	Env map[string]string `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// entrypoint for container image
	EntryPoint []string `protobuf:"bytes,4,rep,name=entryPoint,proto3" json:"entryPoint,omitempty"`
	// raw content / script to be executed as part of module
	Files []*ModuleFileInfo `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
	// git information to work with
	GitInfo *ModuleGitInfo `protobuf:"bytes,6,opt,name=gitInfo,proto3" json:"gitInfo,omitempty"`
}

func (x *ModuleBuildConfig) Reset() {
	*x = ModuleBuildConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleBuildConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleBuildConfig) ProtoMessage() {}

func (x *ModuleBuildConfig) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleBuildConfig.ProtoReflect.Descriptor instead.
func (*ModuleBuildConfig) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{6}
}

func (x *ModuleBuildConfig) GetBaseImage() string {
	if x != nil {
		return x.BaseImage
	}
	return ""
}

func (x *ModuleBuildConfig) GetBuildScript() []string {
	if x != nil {
		return x.BuildScript
	}
	return nil
}

func (x *ModuleBuildConfig) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *ModuleBuildConfig) GetEntryPoint() []string {
	if x != nil {
		return x.EntryPoint
	}
	return nil
}

func (x *ModuleBuildConfig) GetFiles() []*ModuleFileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ModuleBuildConfig) GetGitInfo() *ModuleGitInfo {
	if x != nil {
		return x.GitInfo
	}
	return nil
}

type ModuleBuildStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current status of the moudle build
	Status ModuleBuildDef_Status `protobuf:"varint,1,opt,name=status,proto3,enum=workflow.ModuleBuildDef_Status" json:"status,omitempty"`
	// error message in case of build failure
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	// timestamp of the status
	TimeStamp int64 `protobuf:"varint,3,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
}

func (x *ModuleBuildStatus) Reset() {
	*x = ModuleBuildStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleBuildStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleBuildStatus) ProtoMessage() {}

func (x *ModuleBuildStatus) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleBuildStatus.ProtoReflect.Descriptor instead.
func (*ModuleBuildStatus) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{7}
}

func (x *ModuleBuildStatus) GetStatus() ModuleBuildDef_Status {
	if x != nil {
		return x.Status
	}
	return ModuleBuildDef_Scheduled
}

func (x *ModuleBuildStatus) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *ModuleBuildStatus) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

type ModuleRequestAuditInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp of the message
	TimeStamp int64 `protobuf:"varint,1,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	// username who left the message
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Full name for the user
	Fullname string `protobuf:"bytes,3,opt,name=fullname,proto3" json:"fullname,omitempty"`
	// message left over by the reviewer
	Msg string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ModuleRequestAuditInfo) Reset() {
	*x = ModuleRequestAuditInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleRequestAuditInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRequestAuditInfo) ProtoMessage() {}

func (x *ModuleRequestAuditInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRequestAuditInfo.ProtoReflect.Descriptor instead.
func (*ModuleRequestAuditInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{8}
}

func (x *ModuleRequestAuditInfo) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *ModuleRequestAuditInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ModuleRequestAuditInfo) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *ModuleRequestAuditInfo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ModuleRequestStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// module request id for reference
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// status of the module request
	Status ModuleRequestStatus_Status `protobuf:"varint,2,opt,name=status,proto3,enum=workflow.ModuleRequestStatus_Status" json:"status,omitempty"`
	// Audit trail of the message for this request
	AuditTrail []*ModuleRequestAuditInfo `protobuf:"bytes,3,rep,name=auditTrail,proto3" json:"auditTrail,omitempty"`
}

func (x *ModuleRequestStatus) Reset() {
	*x = ModuleRequestStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleRequestStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRequestStatus) ProtoMessage() {}

func (x *ModuleRequestStatus) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRequestStatus.ProtoReflect.Descriptor instead.
func (*ModuleRequestStatus) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{9}
}

func (x *ModuleRequestStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModuleRequestStatus) GetStatus() ModuleRequestStatus_Status {
	if x != nil {
		return x.Status
	}
	return ModuleRequestStatus_Draft
}

func (x *ModuleRequestStatus) GetAuditTrail() []*ModuleRequestAuditInfo {
	if x != nil {
		return x.AuditTrail
	}
	return nil
}

type ModulesListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of module
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of the module entry
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description of the module
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// created by
	CreatedBy string `protobuf:"bytes,4,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// create time
	CreateTime int64 `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// last update time
	LastUpdate int64 `protobuf:"varint,6,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	// optional tags
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// key to fetch module input like config files or other data.
	InputKeys map[string]*InputKeyData `protobuf:"bytes,8,rep,name=inputKeys,proto3" json:"inputKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// key at which module's execution output is pushed
	OutputKeys map[string]*OutputKeyData `protobuf:"bytes,9,rep,name=outputKeys,proto3" json:"outputKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// module build status
	Build *ModuleBuildStatus `protobuf:"bytes,10,opt,name=build,proto3" json:"build,omitempty"`
	// module status
	Request *ModuleRequestStatus `protobuf:"bytes,11,opt,name=request,proto3" json:"request,omitempty"`
	// module is being deleted
	IsDeleted bool `protobuf:"varint,12,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
}

func (x *ModulesListEntry) Reset() {
	*x = ModulesListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModulesListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModulesListEntry) ProtoMessage() {}

func (x *ModulesListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModulesListEntry.ProtoReflect.Descriptor instead.
func (*ModulesListEntry) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{10}
}

func (x *ModulesListEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModulesListEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModulesListEntry) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ModulesListEntry) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ModulesListEntry) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ModulesListEntry) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *ModulesListEntry) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ModulesListEntry) GetInputKeys() map[string]*InputKeyData {
	if x != nil {
		return x.InputKeys
	}
	return nil
}

func (x *ModulesListEntry) GetOutputKeys() map[string]*OutputKeyData {
	if x != nil {
		return x.OutputKeys
	}
	return nil
}

func (x *ModulesListEntry) GetBuild() *ModuleBuildStatus {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *ModulesListEntry) GetRequest() *ModuleRequestStatus {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ModulesListEntry) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

type ModulesListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total number of modules available for the list
	// this is used for pagination purpose
	// typically consider seach criteria, but other not
	// the length of the items in the response,
	// but typically equal to or more than the number of
	// entries in items
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// modules list entries available as part of the
	// paginated response
	Items []*ModulesListEntry `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ModulesListResp) Reset() {
	*x = ModulesListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModulesListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModulesListResp) ProtoMessage() {}

func (x *ModulesListResp) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModulesListResp.ProtoReflect.Descriptor instead.
func (*ModulesListResp) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{11}
}

func (x *ModulesListResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ModulesListResp) GetItems() []*ModulesListEntry {
	if x != nil {
		return x.Items
	}
	return nil
}

type ModuleFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the file
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// content of the file
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// this needs to be of the format
	// 777 / 755 / 600 / 644 etc
	Perm string `protobuf:"bytes,3,opt,name=perm,proto3" json:"perm,omitempty"`
}

func (x *ModuleFileInfo) Reset() {
	*x = ModuleFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleFileInfo) ProtoMessage() {}

func (x *ModuleFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleFileInfo.ProtoReflect.Descriptor instead.
func (*ModuleFileInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{12}
}

func (x *ModuleFileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleFileInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ModuleFileInfo) GetPerm() string {
	if x != nil {
		return x.Perm
	}
	return ""
}

type ModuleCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mandatory domain
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// mandatory project
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// name of the module entry
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// description of the module
	Desc string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	// optional: tags corresponding to the module
	Tags []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	// build config for module creation
	BuildConfig *ModuleBuildConfig `protobuf:"bytes,6,opt,name=buildConfig,proto3" json:"buildConfig,omitempty"`
	// key to fetch module input like config files or other data.
	InputKeys map[string]*InputKeyData `protobuf:"bytes,7,rep,name=inputKeys,proto3" json:"inputKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// key at which module's execution output is pushed
	OutputKeys map[string]*OutputKeyData `protobuf:"bytes,8,rep,name=outputKeys,proto3" json:"outputKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModuleCreateReq) Reset() {
	*x = ModuleCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCreateReq) ProtoMessage() {}

func (x *ModuleCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCreateReq.ProtoReflect.Descriptor instead.
func (*ModuleCreateReq) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{13}
}

func (x *ModuleCreateReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ModuleCreateReq) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ModuleCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleCreateReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ModuleCreateReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ModuleCreateReq) GetBuildConfig() *ModuleBuildConfig {
	if x != nil {
		return x.BuildConfig
	}
	return nil
}

func (x *ModuleCreateReq) GetInputKeys() map[string]*InputKeyData {
	if x != nil {
		return x.InputKeys
	}
	return nil
}

func (x *ModuleCreateReq) GetOutputKeys() map[string]*OutputKeyData {
	if x != nil {
		return x.OutputKeys
	}
	return nil
}

type ModuleCreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModuleCreateResp) Reset() {
	*x = ModuleCreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCreateResp) ProtoMessage() {}

func (x *ModuleCreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCreateResp.ProtoReflect.Descriptor instead.
func (*ModuleCreateResp) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{14}
}

type ModuleEntryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domain under consideration
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// project under consideration
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// name of the module
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ModuleEntryKey) Reset() {
	*x = ModuleEntryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleEntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleEntryKey) ProtoMessage() {}

func (x *ModuleEntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleEntryKey.ProtoReflect.Descriptor instead.
func (*ModuleEntryKey) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{15}
}

func (x *ModuleEntryKey) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ModuleEntryKey) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ModuleEntryKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ModuleGetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of module
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of the module entry
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description of the module
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// created by
	CreatedBy string `protobuf:"bytes,4,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// create time
	CreateTime int64 `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// last update time
	LastUpdate int64 `protobuf:"varint,6,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	// optional tags
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// build config for module creation
	BuildConfig *ModuleBuildConfig `protobuf:"bytes,8,opt,name=buildConfig,proto3" json:"buildConfig,omitempty"`
	// key to fetch module input like config files or other data.
	InputKeys map[string]*InputKeyData `protobuf:"bytes,9,rep,name=inputKeys,proto3" json:"inputKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// key at which module's execution output is pushed
	OutputKeys map[string]*OutputKeyData `protobuf:"bytes,10,rep,name=outputKeys,proto3" json:"outputKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// module build status
	Build *ModuleBuildStatus `protobuf:"bytes,11,opt,name=build,proto3" json:"build,omitempty"`
	// module status
	Request *ModuleRequestStatus `protobuf:"bytes,12,opt,name=request,proto3" json:"request,omitempty"`
	// module is being deleted
	IsDeleted bool `protobuf:"varint,13,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
}

func (x *ModuleGetResp) Reset() {
	*x = ModuleGetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleGetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleGetResp) ProtoMessage() {}

func (x *ModuleGetResp) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleGetResp.ProtoReflect.Descriptor instead.
func (*ModuleGetResp) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{16}
}

func (x *ModuleGetResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModuleGetResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleGetResp) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ModuleGetResp) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ModuleGetResp) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ModuleGetResp) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *ModuleGetResp) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ModuleGetResp) GetBuildConfig() *ModuleBuildConfig {
	if x != nil {
		return x.BuildConfig
	}
	return nil
}

func (x *ModuleGetResp) GetInputKeys() map[string]*InputKeyData {
	if x != nil {
		return x.InputKeys
	}
	return nil
}

func (x *ModuleGetResp) GetOutputKeys() map[string]*OutputKeyData {
	if x != nil {
		return x.OutputKeys
	}
	return nil
}

func (x *ModuleGetResp) GetBuild() *ModuleBuildStatus {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *ModuleGetResp) GetRequest() *ModuleRequestStatus {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ModuleGetResp) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

type ModuleDeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModuleDeleteResp) Reset() {
	*x = ModuleDeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleDeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleDeleteResp) ProtoMessage() {}

func (x *ModuleDeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleDeleteResp.ProtoReflect.Descriptor instead.
func (*ModuleDeleteResp) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{17}
}

type ModuleRebuildResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModuleRebuildResp) Reset() {
	*x = ModuleRebuildResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleRebuildResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRebuildResp) ProtoMessage() {}

func (x *ModuleRebuildResp) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRebuildResp.ProtoReflect.Descriptor instead.
func (*ModuleRebuildResp) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{18}
}

type ModuleCatalogCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domain under consideration
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// project under consideration
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// name of the module
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// catalog entry against which the request is raised
	// if empty it is considered to be raised as request
	// for new catalog entry
	CatalogId string `protobuf:"bytes,4,opt,name=catalogId,proto3" json:"catalogId,omitempty"`
	// accompaning message for audit trail
	Msg string `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ModuleCatalogCreateReq) Reset() {
	*x = ModuleCatalogCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCatalogCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCatalogCreateReq) ProtoMessage() {}

func (x *ModuleCatalogCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCatalogCreateReq.ProtoReflect.Descriptor instead.
func (*ModuleCatalogCreateReq) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{19}
}

func (x *ModuleCatalogCreateReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ModuleCatalogCreateReq) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ModuleCatalogCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleCatalogCreateReq) GetCatalogId() string {
	if x != nil {
		return x.CatalogId
	}
	return ""
}

func (x *ModuleCatalogCreateReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ModuleCatalogCreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModuleCatalogCreateResp) Reset() {
	*x = ModuleCatalogCreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCatalogCreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCatalogCreateResp) ProtoMessage() {}

func (x *ModuleCatalogCreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCatalogCreateResp.ProtoReflect.Descriptor instead.
func (*ModuleCatalogCreateResp) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{20}
}

type ModuleCatalogDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domain under consideration
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// project under consideration
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// name of the module
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// accompaning message for audit trail
	Msg string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ModuleCatalogDeleteReq) Reset() {
	*x = ModuleCatalogDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCatalogDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCatalogDeleteReq) ProtoMessage() {}

func (x *ModuleCatalogDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCatalogDeleteReq.ProtoReflect.Descriptor instead.
func (*ModuleCatalogDeleteReq) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{21}
}

func (x *ModuleCatalogDeleteReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ModuleCatalogDeleteReq) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ModuleCatalogDeleteReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleCatalogDeleteReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ModuleCatalogDeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModuleCatalogDeleteResp) Reset() {
	*x = ModuleCatalogDeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCatalogDeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCatalogDeleteResp) ProtoMessage() {}

func (x *ModuleCatalogDeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCatalogDeleteResp.ProtoReflect.Descriptor instead.
func (*ModuleCatalogDeleteResp) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{22}
}

type ModuleCommentAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domain under consideration
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// project under consideration
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// name of the module
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// accompaning message for audit trail
	Msg string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ModuleCommentAddReq) Reset() {
	*x = ModuleCommentAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCommentAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCommentAddReq) ProtoMessage() {}

func (x *ModuleCommentAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCommentAddReq.ProtoReflect.Descriptor instead.
func (*ModuleCommentAddReq) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{23}
}

func (x *ModuleCommentAddReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ModuleCommentAddReq) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ModuleCommentAddReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleCommentAddReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ModuleCommentAddResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModuleCommentAddResp) Reset() {
	*x = ModuleCommentAddResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCommentAddResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCommentAddResp) ProtoMessage() {}

func (x *ModuleCommentAddResp) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCommentAddResp.ProtoReflect.Descriptor instead.
func (*ModuleCommentAddResp) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{24}
}

type ModuleCatalogListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domain under consideration
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// project under consideration
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// offset to being from
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// limit of the entries to include in the response list
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ModuleCatalogListReq) Reset() {
	*x = ModuleCatalogListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCatalogListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCatalogListReq) ProtoMessage() {}

func (x *ModuleCatalogListReq) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCatalogListReq.ProtoReflect.Descriptor instead.
func (*ModuleCatalogListReq) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{25}
}

func (x *ModuleCatalogListReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ModuleCatalogListReq) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ModuleCatalogListReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ModuleCatalogListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ModuleCatalogListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of module catalog entry
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of the catalog entry
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description of the Catalog
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// created by
	CreatedBy string `protobuf:"bytes,4,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// create time
	CreateTime int64 `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// last update time
	LastUpdate int64 `protobuf:"varint,6,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	// optional tags
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// key to fetch module input like config files or other data.
	InputKeys map[string]*InputKeyData `protobuf:"bytes,8,rep,name=inputKeys,proto3" json:"inputKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// key at which module's execution output is pushed
	OutputKeys map[string]*OutputKeyData `protobuf:"bytes,9,rep,name=outputKeys,proto3" json:"outputKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// image this catalog module will consume
	Image string `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	// latest version
	LatestVersion string `protobuf:"bytes,11,opt,name=latestVersion,proto3" json:"latestVersion,omitempty"`
	// is this entry archived
	IsArchived bool `protobuf:"varint,12,opt,name=isArchived,proto3" json:"isArchived,omitempty"`
	// is this entry being deleted
	IsDeleted bool `protobuf:"varint,13,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
}

func (x *ModuleCatalogListEntry) Reset() {
	*x = ModuleCatalogListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCatalogListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCatalogListEntry) ProtoMessage() {}

func (x *ModuleCatalogListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCatalogListEntry.ProtoReflect.Descriptor instead.
func (*ModuleCatalogListEntry) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{26}
}

func (x *ModuleCatalogListEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModuleCatalogListEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleCatalogListEntry) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ModuleCatalogListEntry) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ModuleCatalogListEntry) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ModuleCatalogListEntry) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *ModuleCatalogListEntry) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ModuleCatalogListEntry) GetInputKeys() map[string]*InputKeyData {
	if x != nil {
		return x.InputKeys
	}
	return nil
}

func (x *ModuleCatalogListEntry) GetOutputKeys() map[string]*OutputKeyData {
	if x != nil {
		return x.OutputKeys
	}
	return nil
}

func (x *ModuleCatalogListEntry) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ModuleCatalogListEntry) GetLatestVersion() string {
	if x != nil {
		return x.LatestVersion
	}
	return ""
}

func (x *ModuleCatalogListEntry) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *ModuleCatalogListEntry) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

type ModuleCatalogListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// count of enties available corresponding to the filter
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// list of catalog entries
	Items []*ModuleCatalogListEntry `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ModuleCatalogListResp) Reset() {
	*x = ModuleCatalogListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCatalogListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCatalogListResp) ProtoMessage() {}

func (x *ModuleCatalogListResp) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCatalogListResp.ProtoReflect.Descriptor instead.
func (*ModuleCatalogListResp) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{27}
}

func (x *ModuleCatalogListResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ModuleCatalogListResp) GetItems() []*ModuleCatalogListEntry {
	if x != nil {
		return x.Items
	}
	return nil
}

type ModuleCatalogVerListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domain under consideration
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// project under consideration
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// names of the module in catalog
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// offset to being from
	Offset int32 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	// limit of the entries to include in the response list
	Limit int32 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ModuleCatalogVerListReq) Reset() {
	*x = ModuleCatalogVerListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCatalogVerListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCatalogVerListReq) ProtoMessage() {}

func (x *ModuleCatalogVerListReq) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCatalogVerListReq.ProtoReflect.Descriptor instead.
func (*ModuleCatalogVerListReq) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{28}
}

func (x *ModuleCatalogVerListReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ModuleCatalogVerListReq) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ModuleCatalogVerListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleCatalogVerListReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ModuleCatalogVerListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ModuleCatalogVerListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the catalog entry
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// version of the catalog entry
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// description of the Catalog
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// created by
	CreatedBy string `protobuf:"bytes,4,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// create time
	CreateTime int64 `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// last update time
	LastUpdate int64 `protobuf:"varint,6,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	// optional tags
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// key to fetch module input like config files or other data.
	InputKeys map[string]*InputKeyData `protobuf:"bytes,8,rep,name=inputKeys,proto3" json:"inputKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// key at which module's execution output is pushed
	OutputKeys map[string]*OutputKeyData `protobuf:"bytes,9,rep,name=outputKeys,proto3" json:"outputKeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// image this catalog module will consume
	Image string `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	// is this latest version
	IsLatest bool `protobuf:"varint,11,opt,name=isLatest,proto3" json:"isLatest,omitempty"`
	// is this entry archived
	IsArchived bool `protobuf:"varint,12,opt,name=isArchived,proto3" json:"isArchived,omitempty"`
	// is this entry being deleted
	IsDeleted bool `protobuf:"varint,13,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
}

func (x *ModuleCatalogVerListEntry) Reset() {
	*x = ModuleCatalogVerListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCatalogVerListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCatalogVerListEntry) ProtoMessage() {}

func (x *ModuleCatalogVerListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCatalogVerListEntry.ProtoReflect.Descriptor instead.
func (*ModuleCatalogVerListEntry) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{29}
}

func (x *ModuleCatalogVerListEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleCatalogVerListEntry) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ModuleCatalogVerListEntry) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ModuleCatalogVerListEntry) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ModuleCatalogVerListEntry) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ModuleCatalogVerListEntry) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *ModuleCatalogVerListEntry) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ModuleCatalogVerListEntry) GetInputKeys() map[string]*InputKeyData {
	if x != nil {
		return x.InputKeys
	}
	return nil
}

func (x *ModuleCatalogVerListEntry) GetOutputKeys() map[string]*OutputKeyData {
	if x != nil {
		return x.OutputKeys
	}
	return nil
}

func (x *ModuleCatalogVerListEntry) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ModuleCatalogVerListEntry) GetIsLatest() bool {
	if x != nil {
		return x.IsLatest
	}
	return false
}

func (x *ModuleCatalogVerListEntry) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *ModuleCatalogVerListEntry) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

type ModuleCatalogVerListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// count of enties available corresponding to the filter
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// list of catalog version entries
	Items []*ModuleCatalogVerListEntry `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ModuleCatalogVerListResp) Reset() {
	*x = ModuleCatalogVerListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCatalogVerListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCatalogVerListResp) ProtoMessage() {}

func (x *ModuleCatalogVerListResp) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCatalogVerListResp.ProtoReflect.Descriptor instead.
func (*ModuleCatalogVerListResp) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{30}
}

func (x *ModuleCatalogVerListResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ModuleCatalogVerListResp) GetItems() []*ModuleCatalogVerListEntry {
	if x != nil {
		return x.Items
	}
	return nil
}

type ModuleCatalogRequestListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domain under consideration
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// offset for pagination
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// limit for pagination
	Limit  int32                                    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Status ModuleCatalogRequestListReq_FilterStatus `protobuf:"varint,4,opt,name=status,proto3,enum=workflow.ModuleCatalogRequestListReq_FilterStatus" json:"status,omitempty"`
}

func (x *ModuleCatalogRequestListReq) Reset() {
	*x = ModuleCatalogRequestListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCatalogRequestListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCatalogRequestListReq) ProtoMessage() {}

func (x *ModuleCatalogRequestListReq) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCatalogRequestListReq.ProtoReflect.Descriptor instead.
func (*ModuleCatalogRequestListReq) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{31}
}

func (x *ModuleCatalogRequestListReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ModuleCatalogRequestListReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ModuleCatalogRequestListReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ModuleCatalogRequestListReq) GetStatus() ModuleCatalogRequestListReq_FilterStatus {
	if x != nil {
		return x.Status
	}
	return ModuleCatalogRequestListReq_Open
}

type ModuleRequestModuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domain under consideration
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// project under consideration
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// name of the module
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// id of the module
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ModuleRequestModuleInfo) Reset() {
	*x = ModuleRequestModuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleRequestModuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRequestModuleInfo) ProtoMessage() {}

func (x *ModuleRequestModuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRequestModuleInfo.ProtoReflect.Descriptor instead.
func (*ModuleRequestModuleInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{32}
}

func (x *ModuleRequestModuleInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ModuleRequestModuleInfo) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ModuleRequestModuleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleRequestModuleInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ModuleRequestCatalogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// catalog entry id, this field will be empty,
	// if the requesst is for new catalog entry
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of the catalog entry
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description of the Catalog
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ModuleRequestCatalogInfo) Reset() {
	*x = ModuleRequestCatalogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleRequestCatalogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRequestCatalogInfo) ProtoMessage() {}

func (x *ModuleRequestCatalogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRequestCatalogInfo.ProtoReflect.Descriptor instead.
func (*ModuleRequestCatalogInfo) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{33}
}

func (x *ModuleRequestCatalogInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModuleRequestCatalogInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleRequestCatalogInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type ModuleCatalogRequestListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the request
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// request status
	Status ModuleRequestStatus_Status `protobuf:"varint,2,opt,name=status,proto3,enum=workflow.ModuleRequestStatus_Status" json:"status,omitempty"`
	// module info
	Module *ModuleRequestModuleInfo `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
	// catalog mapping info
	Catalog *ModuleRequestCatalogInfo `protobuf:"bytes,4,opt,name=catalog,proto3" json:"catalog,omitempty"`
	// Audit trail of the message for this request
	AuditTrail []*ModuleRequestAuditInfo `protobuf:"bytes,5,rep,name=auditTrail,proto3" json:"auditTrail,omitempty"`
}

func (x *ModuleCatalogRequestListEntry) Reset() {
	*x = ModuleCatalogRequestListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCatalogRequestListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCatalogRequestListEntry) ProtoMessage() {}

func (x *ModuleCatalogRequestListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCatalogRequestListEntry.ProtoReflect.Descriptor instead.
func (*ModuleCatalogRequestListEntry) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{34}
}

func (x *ModuleCatalogRequestListEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModuleCatalogRequestListEntry) GetStatus() ModuleRequestStatus_Status {
	if x != nil {
		return x.Status
	}
	return ModuleRequestStatus_Draft
}

func (x *ModuleCatalogRequestListEntry) GetModule() *ModuleRequestModuleInfo {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *ModuleCatalogRequestListEntry) GetCatalog() *ModuleRequestCatalogInfo {
	if x != nil {
		return x.Catalog
	}
	return nil
}

func (x *ModuleCatalogRequestListEntry) GetAuditTrail() []*ModuleRequestAuditInfo {
	if x != nil {
		return x.AuditTrail
	}
	return nil
}

type ModuleCatalogRequestListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total number of available requests
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// list of requests corresponding to this response
	Items []*ModuleCatalogRequestListEntry `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ModuleCatalogRequestListResp) Reset() {
	*x = ModuleCatalogRequestListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleCatalogRequestListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleCatalogRequestListResp) ProtoMessage() {}

func (x *ModuleCatalogRequestListResp) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleCatalogRequestListResp.ProtoReflect.Descriptor instead.
func (*ModuleCatalogRequestListResp) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{35}
}

func (x *ModuleCatalogRequestListResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ModuleCatalogRequestListResp) GetItems() []*ModuleCatalogRequestListEntry {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_module_proto protoreflect.FileDescriptor

var file_module_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x22, 0x59, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x69, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x52, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x22, 0x25, 0x0a, 0x09,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x22, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x10, 0x00, 0x22, 0x54, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x44, 0x65, 0x66, 0x22, 0x42, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x22, 0x5c, 0x0a, 0x0c, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x22, 0x49, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x22, 0xc6, 0x02, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x47, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x67, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x11,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x80, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0xe5, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x22, 0x3e, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x72, 0x61, 0x66, 0x74, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x03, 0x22, 0x89, 0x05, 0x0a, 0x10,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b,
	0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x31, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x1a, 0x54, 0x0a, 0x0e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x56, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x52, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x22, 0xff, 0x03, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x49, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x54, 0x0a, 0x0e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x56, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x12, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x56, 0x0a, 0x0e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x05, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x44, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b,
	0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x1a, 0x54, 0x0a, 0x0e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56,
	0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x12, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x13, 0x0a, 0x11, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x8e, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x19, 0x0a, 0x17, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x70, 0x0a, 0x16, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x19, 0x0a,
	0x17, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6d, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x16, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x76, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8b, 0x05, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x09,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x1a, 0x54, 0x0a, 0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a,
	0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8d, 0x01, 0x0a,
	0x17, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x94, 0x05, 0x0a,
	0x19, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x50,
	0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x53, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x1a, 0x54, 0x0a, 0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65,
	0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0f, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x18, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xde, 0x01, 0x0a, 0x1b, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x2d, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x10,
	0x02, 0x22, 0x6f, 0x0a, 0x17, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x52, 0x0a, 0x18, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xa8, 0x02, 0x0a, 0x1d, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12,
	0x40, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x22, 0x73, 0x0a, 0x1c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x32, 0xfe, 0x0e, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x41, 0x70, 0x69, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3c, 0x12, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x8b, 0x01,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x19,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x22, 0x39, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x1a, 0x17, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x48, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x1a, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f,
	0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x2a, 0x40, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x98, 0x01, 0x0a,
	0x0d, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x1a, 0x1b, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x22, 0x48, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0xb0, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x22, 0x48, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xad, 0x01, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a,
	0x2a, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0xa6, 0x01, 0x0a, 0x10, 0x41,
	0x64, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x53,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x22, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f,
	0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x9f, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x1e, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x43, 0x12, 0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0xb8, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x12, 0x21,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53, 0x12, 0x51, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0xa4, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x39, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0x8c, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x67, 0x65, 0x69, 0x6f,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x92, 0x41,
	0x55, 0x12, 0x20, 0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x73, 0x70, 0x65, 0x63, 0x32, 0x03,
	0x31, 0x2e, 0x30, 0x72, 0x31, 0x0a, 0x2f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x20,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x61, 0x70, 0x69, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x43, 0x6f,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_module_proto_rawDescOnce sync.Once
	file_module_proto_rawDescData = file_module_proto_rawDesc
)

func file_module_proto_rawDescGZIP() []byte {
	file_module_proto_rawDescOnce.Do(func() {
		file_module_proto_rawDescData = protoimpl.X.CompressGZIP(file_module_proto_rawDescData)
	})
	return file_module_proto_rawDescData
}

var file_module_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_module_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_module_proto_goTypes = []interface{}{
	(ModuleDef_KeyType)(0),                        // 0: workflow.ModuleDef.KeyType
	(ModuleBuildDef_Status)(0),                    // 1: workflow.ModuleBuildDef.Status
	(ModuleRequestStatus_Status)(0),               // 2: workflow.ModuleRequestStatus.Status
	(ModuleCatalogRequestListReq_FilterStatus)(0), // 3: workflow.ModuleCatalogRequestListReq.FilterStatus
	(*ModulesListReq)(nil),                        // 4: workflow.ModulesListReq
	(*ModuleGitInfo)(nil),                         // 5: workflow.ModuleGitInfo
	(*ModuleDef)(nil),                             // 6: workflow.ModuleDef
	(*ModuleBuildDef)(nil),                        // 7: workflow.ModuleBuildDef
	(*InputKeyData)(nil),                          // 8: workflow.InputKeyData
	(*OutputKeyData)(nil),                         // 9: workflow.OutputKeyData
	(*ModuleBuildConfig)(nil),                     // 10: workflow.ModuleBuildConfig
	(*ModuleBuildStatus)(nil),                     // 11: workflow.ModuleBuildStatus
	(*ModuleRequestAuditInfo)(nil),                // 12: workflow.ModuleRequestAuditInfo
	(*ModuleRequestStatus)(nil),                   // 13: workflow.ModuleRequestStatus
	(*ModulesListEntry)(nil),                      // 14: workflow.ModulesListEntry
	(*ModulesListResp)(nil),                       // 15: workflow.ModulesListResp
	(*ModuleFileInfo)(nil),                        // 16: workflow.ModuleFileInfo
	(*ModuleCreateReq)(nil),                       // 17: workflow.ModuleCreateReq
	(*ModuleCreateResp)(nil),                      // 18: workflow.ModuleCreateResp
	(*ModuleEntryKey)(nil),                        // 19: workflow.ModuleEntryKey
	(*ModuleGetResp)(nil),                         // 20: workflow.ModuleGetResp
	(*ModuleDeleteResp)(nil),                      // 21: workflow.ModuleDeleteResp
	(*ModuleRebuildResp)(nil),                     // 22: workflow.ModuleRebuildResp
	(*ModuleCatalogCreateReq)(nil),                // 23: workflow.ModuleCatalogCreateReq
	(*ModuleCatalogCreateResp)(nil),               // 24: workflow.ModuleCatalogCreateResp
	(*ModuleCatalogDeleteReq)(nil),                // 25: workflow.ModuleCatalogDeleteReq
	(*ModuleCatalogDeleteResp)(nil),               // 26: workflow.ModuleCatalogDeleteResp
	(*ModuleCommentAddReq)(nil),                   // 27: workflow.ModuleCommentAddReq
	(*ModuleCommentAddResp)(nil),                  // 28: workflow.ModuleCommentAddResp
	(*ModuleCatalogListReq)(nil),                  // 29: workflow.ModuleCatalogListReq
	(*ModuleCatalogListEntry)(nil),                // 30: workflow.ModuleCatalogListEntry
	(*ModuleCatalogListResp)(nil),                 // 31: workflow.ModuleCatalogListResp
	(*ModuleCatalogVerListReq)(nil),               // 32: workflow.ModuleCatalogVerListReq
	(*ModuleCatalogVerListEntry)(nil),             // 33: workflow.ModuleCatalogVerListEntry
	(*ModuleCatalogVerListResp)(nil),              // 34: workflow.ModuleCatalogVerListResp
	(*ModuleCatalogRequestListReq)(nil),           // 35: workflow.ModuleCatalogRequestListReq
	(*ModuleRequestModuleInfo)(nil),               // 36: workflow.ModuleRequestModuleInfo
	(*ModuleRequestCatalogInfo)(nil),              // 37: workflow.ModuleRequestCatalogInfo
	(*ModuleCatalogRequestListEntry)(nil),         // 38: workflow.ModuleCatalogRequestListEntry
	(*ModuleCatalogRequestListResp)(nil),          // 39: workflow.ModuleCatalogRequestListResp
	nil,                                           // 40: workflow.ModuleBuildConfig.EnvEntry
	nil,                                           // 41: workflow.ModulesListEntry.InputKeysEntry
	nil,                                           // 42: workflow.ModulesListEntry.OutputKeysEntry
	nil,                                           // 43: workflow.ModuleCreateReq.InputKeysEntry
	nil,                                           // 44: workflow.ModuleCreateReq.OutputKeysEntry
	nil,                                           // 45: workflow.ModuleGetResp.InputKeysEntry
	nil,                                           // 46: workflow.ModuleGetResp.OutputKeysEntry
	nil,                                           // 47: workflow.ModuleCatalogListEntry.InputKeysEntry
	nil,                                           // 48: workflow.ModuleCatalogListEntry.OutputKeysEntry
	nil,                                           // 49: workflow.ModuleCatalogVerListEntry.InputKeysEntry
	nil,                                           // 50: workflow.ModuleCatalogVerListEntry.OutputKeysEntry
}
var file_module_proto_depIdxs = []int32{
	40, // 0: workflow.ModuleBuildConfig.env:type_name -> workflow.ModuleBuildConfig.EnvEntry
	16, // 1: workflow.ModuleBuildConfig.files:type_name -> workflow.ModuleFileInfo
	5,  // 2: workflow.ModuleBuildConfig.gitInfo:type_name -> workflow.ModuleGitInfo
	1,  // 3: workflow.ModuleBuildStatus.status:type_name -> workflow.ModuleBuildDef.Status
	2,  // 4: workflow.ModuleRequestStatus.status:type_name -> workflow.ModuleRequestStatus.Status
	12, // 5: workflow.ModuleRequestStatus.auditTrail:type_name -> workflow.ModuleRequestAuditInfo
	41, // 6: workflow.ModulesListEntry.inputKeys:type_name -> workflow.ModulesListEntry.InputKeysEntry
	42, // 7: workflow.ModulesListEntry.outputKeys:type_name -> workflow.ModulesListEntry.OutputKeysEntry
	11, // 8: workflow.ModulesListEntry.build:type_name -> workflow.ModuleBuildStatus
	13, // 9: workflow.ModulesListEntry.request:type_name -> workflow.ModuleRequestStatus
	14, // 10: workflow.ModulesListResp.items:type_name -> workflow.ModulesListEntry
	10, // 11: workflow.ModuleCreateReq.buildConfig:type_name -> workflow.ModuleBuildConfig
	43, // 12: workflow.ModuleCreateReq.inputKeys:type_name -> workflow.ModuleCreateReq.InputKeysEntry
	44, // 13: workflow.ModuleCreateReq.outputKeys:type_name -> workflow.ModuleCreateReq.OutputKeysEntry
	10, // 14: workflow.ModuleGetResp.buildConfig:type_name -> workflow.ModuleBuildConfig
	45, // 15: workflow.ModuleGetResp.inputKeys:type_name -> workflow.ModuleGetResp.InputKeysEntry
	46, // 16: workflow.ModuleGetResp.outputKeys:type_name -> workflow.ModuleGetResp.OutputKeysEntry
	11, // 17: workflow.ModuleGetResp.build:type_name -> workflow.ModuleBuildStatus
	13, // 18: workflow.ModuleGetResp.request:type_name -> workflow.ModuleRequestStatus
	47, // 19: workflow.ModuleCatalogListEntry.inputKeys:type_name -> workflow.ModuleCatalogListEntry.InputKeysEntry
	48, // 20: workflow.ModuleCatalogListEntry.outputKeys:type_name -> workflow.ModuleCatalogListEntry.OutputKeysEntry
	30, // 21: workflow.ModuleCatalogListResp.items:type_name -> workflow.ModuleCatalogListEntry
	49, // 22: workflow.ModuleCatalogVerListEntry.inputKeys:type_name -> workflow.ModuleCatalogVerListEntry.InputKeysEntry
	50, // 23: workflow.ModuleCatalogVerListEntry.outputKeys:type_name -> workflow.ModuleCatalogVerListEntry.OutputKeysEntry
	33, // 24: workflow.ModuleCatalogVerListResp.items:type_name -> workflow.ModuleCatalogVerListEntry
	3,  // 25: workflow.ModuleCatalogRequestListReq.status:type_name -> workflow.ModuleCatalogRequestListReq.FilterStatus
	2,  // 26: workflow.ModuleCatalogRequestListEntry.status:type_name -> workflow.ModuleRequestStatus.Status
	36, // 27: workflow.ModuleCatalogRequestListEntry.module:type_name -> workflow.ModuleRequestModuleInfo
	37, // 28: workflow.ModuleCatalogRequestListEntry.catalog:type_name -> workflow.ModuleRequestCatalogInfo
	12, // 29: workflow.ModuleCatalogRequestListEntry.auditTrail:type_name -> workflow.ModuleRequestAuditInfo
	38, // 30: workflow.ModuleCatalogRequestListResp.items:type_name -> workflow.ModuleCatalogRequestListEntry
	8,  // 31: workflow.ModulesListEntry.InputKeysEntry.value:type_name -> workflow.InputKeyData
	9,  // 32: workflow.ModulesListEntry.OutputKeysEntry.value:type_name -> workflow.OutputKeyData
	8,  // 33: workflow.ModuleCreateReq.InputKeysEntry.value:type_name -> workflow.InputKeyData
	9,  // 34: workflow.ModuleCreateReq.OutputKeysEntry.value:type_name -> workflow.OutputKeyData
	8,  // 35: workflow.ModuleGetResp.InputKeysEntry.value:type_name -> workflow.InputKeyData
	9,  // 36: workflow.ModuleGetResp.OutputKeysEntry.value:type_name -> workflow.OutputKeyData
	8,  // 37: workflow.ModuleCatalogListEntry.InputKeysEntry.value:type_name -> workflow.InputKeyData
	9,  // 38: workflow.ModuleCatalogListEntry.OutputKeysEntry.value:type_name -> workflow.OutputKeyData
	8,  // 39: workflow.ModuleCatalogVerListEntry.InputKeysEntry.value:type_name -> workflow.InputKeyData
	9,  // 40: workflow.ModuleCatalogVerListEntry.OutputKeysEntry.value:type_name -> workflow.OutputKeyData
	4,  // 41: workflow.ModuleApi.ListModules:input_type -> workflow.ModulesListReq
	17, // 42: workflow.ModuleApi.CreateModule:input_type -> workflow.ModuleCreateReq
	19, // 43: workflow.ModuleApi.GetModule:input_type -> workflow.ModuleEntryKey
	17, // 44: workflow.ModuleApi.UpdateModule:input_type -> workflow.ModuleCreateReq
	19, // 45: workflow.ModuleApi.DeleteModule:input_type -> workflow.ModuleEntryKey
	19, // 46: workflow.ModuleApi.RebuildModule:input_type -> workflow.ModuleEntryKey
	23, // 47: workflow.ModuleApi.CreateCatalogRequest:input_type -> workflow.ModuleCatalogCreateReq
	25, // 48: workflow.ModuleApi.DeleteCatalogRequest:input_type -> workflow.ModuleCatalogDeleteReq
	27, // 49: workflow.ModuleApi.AddModuleComment:input_type -> workflow.ModuleCommentAddReq
	29, // 50: workflow.ModuleApi.ListModuleCatalog:input_type -> workflow.ModuleCatalogListReq
	32, // 51: workflow.ModuleApi.ListModuleCatalogVer:input_type -> workflow.ModuleCatalogVerListReq
	35, // 52: workflow.ModuleApi.ListModuleCatalogRequest:input_type -> workflow.ModuleCatalogRequestListReq
	15, // 53: workflow.ModuleApi.ListModules:output_type -> workflow.ModulesListResp
	18, // 54: workflow.ModuleApi.CreateModule:output_type -> workflow.ModuleCreateResp
	20, // 55: workflow.ModuleApi.GetModule:output_type -> workflow.ModuleGetResp
	18, // 56: workflow.ModuleApi.UpdateModule:output_type -> workflow.ModuleCreateResp
	21, // 57: workflow.ModuleApi.DeleteModule:output_type -> workflow.ModuleDeleteResp
	22, // 58: workflow.ModuleApi.RebuildModule:output_type -> workflow.ModuleRebuildResp
	24, // 59: workflow.ModuleApi.CreateCatalogRequest:output_type -> workflow.ModuleCatalogCreateResp
	26, // 60: workflow.ModuleApi.DeleteCatalogRequest:output_type -> workflow.ModuleCatalogDeleteResp
	28, // 61: workflow.ModuleApi.AddModuleComment:output_type -> workflow.ModuleCommentAddResp
	31, // 62: workflow.ModuleApi.ListModuleCatalog:output_type -> workflow.ModuleCatalogListResp
	34, // 63: workflow.ModuleApi.ListModuleCatalogVer:output_type -> workflow.ModuleCatalogVerListResp
	39, // 64: workflow.ModuleApi.ListModuleCatalogRequest:output_type -> workflow.ModuleCatalogRequestListResp
	53, // [53:65] is the sub-list for method output_type
	41, // [41:53] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_module_proto_init() }
func file_module_proto_init() {
	if File_module_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_module_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModulesListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleGitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleBuildDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputKeyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputKeyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleBuildConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleBuildStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleRequestAuditInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleRequestStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModulesListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModulesListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleEntryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleGetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleDeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleRebuildResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCatalogCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCatalogCreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCatalogDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCatalogDeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCommentAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCommentAddResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCatalogListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCatalogListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCatalogListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCatalogVerListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCatalogVerListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCatalogVerListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCatalogRequestListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleRequestModuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleRequestCatalogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCatalogRequestListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleCatalogRequestListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_module_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_module_proto_goTypes,
		DependencyIndexes: file_module_proto_depIdxs,
		EnumInfos:         file_module_proto_enumTypes,
		MessageInfos:      file_module_proto_msgTypes,
	}.Build()
	File_module_proto = out.File
	file_module_proto_rawDesc = nil
	file_module_proto_goTypes = nil
	file_module_proto_depIdxs = nil
}
