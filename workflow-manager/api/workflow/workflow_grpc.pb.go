// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkflowApiClient is the client API for WorkflowApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowApiClient interface {
	// List Workflows executed in a project
	ListWorkflows(ctx context.Context, in *WorkflowListReq, opts ...grpc.CallOption) (*WorkflowListResp, error)
	DeleteWorkflow(ctx context.Context, in *WorkflowDeleteReq, opts ...grpc.CallOption) (*WorkflowDeleteResp, error)
	GetWorkflow(ctx context.Context, in *WorkflowGetReq, opts ...grpc.CallOption) (*WorkflowGetResp, error)
}

type workflowApiClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowApiClient(cc grpc.ClientConnInterface) WorkflowApiClient {
	return &workflowApiClient{cc}
}

func (c *workflowApiClient) ListWorkflows(ctx context.Context, in *WorkflowListReq, opts ...grpc.CallOption) (*WorkflowListResp, error) {
	out := new(WorkflowListResp)
	err := c.cc.Invoke(ctx, "/workflow.WorkflowApi/ListWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowApiClient) DeleteWorkflow(ctx context.Context, in *WorkflowDeleteReq, opts ...grpc.CallOption) (*WorkflowDeleteResp, error) {
	out := new(WorkflowDeleteResp)
	err := c.cc.Invoke(ctx, "/workflow.WorkflowApi/DeleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowApiClient) GetWorkflow(ctx context.Context, in *WorkflowGetReq, opts ...grpc.CallOption) (*WorkflowGetResp, error) {
	out := new(WorkflowGetResp)
	err := c.cc.Invoke(ctx, "/workflow.WorkflowApi/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowApiServer is the server API for WorkflowApi service.
// All implementations must embed UnimplementedWorkflowApiServer
// for forward compatibility
type WorkflowApiServer interface {
	// List Workflows executed in a project
	ListWorkflows(context.Context, *WorkflowListReq) (*WorkflowListResp, error)
	DeleteWorkflow(context.Context, *WorkflowDeleteReq) (*WorkflowDeleteResp, error)
	GetWorkflow(context.Context, *WorkflowGetReq) (*WorkflowGetResp, error)
	mustEmbedUnimplementedWorkflowApiServer()
}

// UnimplementedWorkflowApiServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowApiServer struct {
}

func (UnimplementedWorkflowApiServer) ListWorkflows(context.Context, *WorkflowListReq) (*WorkflowListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedWorkflowApiServer) DeleteWorkflow(context.Context, *WorkflowDeleteReq) (*WorkflowDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (UnimplementedWorkflowApiServer) GetWorkflow(context.Context, *WorkflowGetReq) (*WorkflowGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedWorkflowApiServer) mustEmbedUnimplementedWorkflowApiServer() {}

// UnsafeWorkflowApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowApiServer will
// result in compilation errors.
type UnsafeWorkflowApiServer interface {
	mustEmbedUnimplementedWorkflowApiServer()
}

func RegisterWorkflowApiServer(s grpc.ServiceRegistrar, srv WorkflowApiServer) {
	s.RegisterService(&WorkflowApi_ServiceDesc, srv)
}

func _WorkflowApi_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowApiServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.WorkflowApi/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).ListWorkflows(ctx, req.(*WorkflowListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowApiServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.WorkflowApi/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).DeleteWorkflow(ctx, req.(*WorkflowDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApi_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowApiServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.WorkflowApi/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApiServer).GetWorkflow(ctx, req.(*WorkflowGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowApi_ServiceDesc is the grpc.ServiceDesc for WorkflowApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.WorkflowApi",
	HandlerType: (*WorkflowApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWorkflows",
			Handler:    _WorkflowApi_ListWorkflows_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _WorkflowApi_DeleteWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _WorkflowApi_GetWorkflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow.proto",
}
