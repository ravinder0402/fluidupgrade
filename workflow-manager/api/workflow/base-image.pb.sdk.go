// Code generated by protoc-gen-coredge-sdk. DO NOT EDIT.
// source: base-image.proto

/*
Package workflow is auto generated SDK module

It provides auto generated functions to perform operations
using APIs defined as part of protobuf
*/
package workflow

import (
	"bytes"
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/coredgeio/gosdkclient"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
)

type BaseImageApiSdkClient interface {
	ListBaseImages(req *BaseImagesListReq) (*BaseImagesListResp, error)
	AddBaseImage(req *BaseImageAddReq) (*BaseImageAddResp, error)
	DeleteBaseImage(req *BaseImageDelReq) (*BaseImageDelResp, error)
	ListProjectBaseImages(req *ProjectBaseImagesListReq) (*BaseImagesListResp, error)
}

type implBaseImageApiClient struct {
	client     gosdkclient.SdkClient
	pathPrefix string
}

func NewBaseImageApiSdkClient(client gosdkclient.SdkClient) BaseImageApiSdkClient {
	return &implBaseImageApiClient{
		client: client,
	}
}

func (c *implBaseImageApiClient) ListBaseImages(req *BaseImagesListReq) (*BaseImagesListResp, error) {
	// TODO(prabhjot) we are ignoring the error here for the time being
	subUrl := "/api/workflow/v1/domain/{domain}/base-images"
	subUrl = strings.Replace(subUrl, "{"+"domain"+"}", fmt.Sprintf("%v", req.Domain), -1)
	marshaller := &runtime.JSONPb{}
	r, _ := http.NewRequest("GET", subUrl, nil)
	r.Header.Set("Content-Type", "application/json")
	resp, err := c.client.PerformReq(r)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	obj := &BaseImagesListResp{}
	err = marshaller.Unmarshal(bodyBytes, obj)
	if err != nil {
		return nil, err
	}

	return obj, nil
}

func (c *implBaseImageApiClient) AddBaseImage(req *BaseImageAddReq) (*BaseImageAddResp, error) {
	// TODO(prabhjot) we are ignoring the error here for the time being
	subUrl := "/api/workflow/v1/domain/{domain}/base-image/{name}/version"
	subUrl = strings.Replace(subUrl, "{"+"domain"+"}", fmt.Sprintf("%v", req.Domain), -1)
	subUrl = strings.Replace(subUrl, "{"+"name"+"}", fmt.Sprintf("%v", req.Name), -1)
	marshaller := &runtime.JSONPb{}
	jsonData, _ := marshaller.Marshal(req)
	r, _ := http.NewRequest("POST", subUrl, bytes.NewBuffer(jsonData))
	r.Header.Set("Content-Type", "application/json")
	resp, err := c.client.PerformReq(r)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	obj := &BaseImageAddResp{}
	err = marshaller.Unmarshal(bodyBytes, obj)
	if err != nil {
		return nil, err
	}

	return obj, nil
}

func (c *implBaseImageApiClient) DeleteBaseImage(req *BaseImageDelReq) (*BaseImageDelResp, error) {
	// TODO(prabhjot) we are ignoring the error here for the time being
	subUrl := "/api/workflow/v1/domain/{domain}/base-image/{name}/version/{version}"
	subUrl = strings.Replace(subUrl, "{"+"domain"+"}", fmt.Sprintf("%v", req.Domain), -1)
	subUrl = strings.Replace(subUrl, "{"+"name"+"}", fmt.Sprintf("%v", req.Name), -1)
	subUrl = strings.Replace(subUrl, "{"+"version"+"}", fmt.Sprintf("%v", req.Version), -1)
	marshaller := &runtime.JSONPb{}
	r, _ := http.NewRequest("DELETE", subUrl, nil)
	r.Header.Set("Content-Type", "application/json")
	resp, err := c.client.PerformReq(r)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	obj := &BaseImageDelResp{}
	err = marshaller.Unmarshal(bodyBytes, obj)
	if err != nil {
		return nil, err
	}

	return obj, nil
}

func (c *implBaseImageApiClient) ListProjectBaseImages(req *ProjectBaseImagesListReq) (*BaseImagesListResp, error) {
	// TODO(prabhjot) we are ignoring the error here for the time being
	subUrl := "/api/workflow/v1/domain/{domain}/project/{project}/base-images"
	subUrl = strings.Replace(subUrl, "{"+"domain"+"}", fmt.Sprintf("%v", req.Domain), -1)
	subUrl = strings.Replace(subUrl, "{"+"project"+"}", fmt.Sprintf("%v", req.Project), -1)
	marshaller := &runtime.JSONPb{}
	r, _ := http.NewRequest("GET", subUrl, nil)
	r.Header.Set("Content-Type", "application/json")
	resp, err := c.client.PerformReq(r)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	obj := &BaseImagesListResp{}
	err = marshaller.Unmarshal(bodyBytes, obj)
	if err != nil {
		return nil, err
	}

	return obj, nil
}
