// Code generated by protoc-gen-coredge-sdk. DO NOT EDIT.
// source: workflow.proto

/*
Package workflow is auto generated SDK module

It provides auto generated functions to perform operations
using APIs defined as part of protobuf
*/
package workflow

import (
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/coredgeio/gosdkclient"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
)

type WorkflowApiSdkClient interface {
	ListWorkflows(req *WorkflowListReq) (*WorkflowListResp, error)
	DeleteWorkflow(req *WorkflowDeleteReq) (*WorkflowDeleteResp, error)
	GetWorkflow(req *WorkflowGetReq) (*WorkflowGetResp, error)
}

type implWorkflowApiClient struct {
	client     gosdkclient.SdkClient
	pathPrefix string
}

func NewWorkflowApiSdkClient(client gosdkclient.SdkClient) WorkflowApiSdkClient {
	return &implWorkflowApiClient{
		client: client,
	}
}

func (c *implWorkflowApiClient) ListWorkflows(req *WorkflowListReq) (*WorkflowListResp, error) {
	// TODO(prabhjot) we are ignoring the error here for the time being
	subUrl := "/api/workflow/v1/domain/{domain}/project/{project}/workflows"
	subUrl = strings.Replace(subUrl, "{"+"domain"+"}", fmt.Sprintf("%v", req.Domain), -1)
	subUrl = strings.Replace(subUrl, "{"+"project"+"}", fmt.Sprintf("%v", req.Project), -1)
	marshaller := &runtime.JSONPb{}
	r, _ := http.NewRequest("GET", subUrl, nil)
	q := url.Values{}
	q.Add("offset", fmt.Sprintf("%v", req.Offset))
	q.Add("limit", fmt.Sprintf("%v", req.Limit))
	q.Add("search", fmt.Sprintf("%v", req.Search))
	r.URL.RawQuery = q.Encode()
	r.Header.Set("Content-Type", "application/json")
	resp, err := c.client.PerformReq(r)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	obj := &WorkflowListResp{}
	err = marshaller.Unmarshal(bodyBytes, obj)
	if err != nil {
		return nil, err
	}

	return obj, nil
}

func (c *implWorkflowApiClient) DeleteWorkflow(req *WorkflowDeleteReq) (*WorkflowDeleteResp, error) {
	// TODO(prabhjot) we are ignoring the error here for the time being
	subUrl := "/api/workflow/v1/domain/{domain}/project/{project}/workflow/{name}"
	subUrl = strings.Replace(subUrl, "{"+"domain"+"}", fmt.Sprintf("%v", req.Domain), -1)
	subUrl = strings.Replace(subUrl, "{"+"project"+"}", fmt.Sprintf("%v", req.Project), -1)
	subUrl = strings.Replace(subUrl, "{"+"name"+"}", fmt.Sprintf("%v", req.Name), -1)
	marshaller := &runtime.JSONPb{}
	r, _ := http.NewRequest("DELETE", subUrl, nil)
	r.Header.Set("Content-Type", "application/json")
	resp, err := c.client.PerformReq(r)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	obj := &WorkflowDeleteResp{}
	err = marshaller.Unmarshal(bodyBytes, obj)
	if err != nil {
		return nil, err
	}

	return obj, nil
}

func (c *implWorkflowApiClient) GetWorkflow(req *WorkflowGetReq) (*WorkflowGetResp, error) {
	// TODO(prabhjot) we are ignoring the error here for the time being
	subUrl := "/api/workflow/v1/domain/{domain}/project/{project}/workflow/{name}"
	subUrl = strings.Replace(subUrl, "{"+"domain"+"}", fmt.Sprintf("%v", req.Domain), -1)
	subUrl = strings.Replace(subUrl, "{"+"project"+"}", fmt.Sprintf("%v", req.Project), -1)
	subUrl = strings.Replace(subUrl, "{"+"name"+"}", fmt.Sprintf("%v", req.Name), -1)
	marshaller := &runtime.JSONPb{}
	r, _ := http.NewRequest("GET", subUrl, nil)
	r.Header.Set("Content-Type", "application/json")
	resp, err := c.client.PerformReq(r)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	obj := &WorkflowGetResp{}
	err = marshaller.Unmarshal(bodyBytes, obj)
	if err != nil {
		return nil, err
	}

	return obj, nil
}
