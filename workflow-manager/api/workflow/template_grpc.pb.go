// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkflowTemplateApiClient is the client API for WorkflowTemplateApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowTemplateApiClient interface {
	// List Workflow Templates in a project
	ListTemplates(ctx context.Context, in *TemplateListReq, opts ...grpc.CallOption) (*TemplateListResp, error)
	// create a new workflow template
	CreateTemplate(ctx context.Context, in *TemplateCreateReq, opts ...grpc.CallOption) (*TemplateCreateResp, error)
	// get workflow template
	GetTemplate(ctx context.Context, in *TemplateGetReq, opts ...grpc.CallOption) (*TemplateGetResp, error)
	// update an existing workflow template
	UpdateTemplate(ctx context.Context, in *TemplateUpdateReq, opts ...grpc.CallOption) (*TemplateUpdateResp, error)
	// delete an existing workflow template
	DeleteTemplate(ctx context.Context, in *TemplateDeleteReq, opts ...grpc.CallOption) (*TemplateDeleteResp, error)
	// execute a workflow template
	ExecuteTemplate(ctx context.Context, in *TemplateExecuteReq, opts ...grpc.CallOption) (*TemplateExecuteResp, error)
}

type workflowTemplateApiClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowTemplateApiClient(cc grpc.ClientConnInterface) WorkflowTemplateApiClient {
	return &workflowTemplateApiClient{cc}
}

func (c *workflowTemplateApiClient) ListTemplates(ctx context.Context, in *TemplateListReq, opts ...grpc.CallOption) (*TemplateListResp, error) {
	out := new(TemplateListResp)
	err := c.cc.Invoke(ctx, "/workflow.WorkflowTemplateApi/ListTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowTemplateApiClient) CreateTemplate(ctx context.Context, in *TemplateCreateReq, opts ...grpc.CallOption) (*TemplateCreateResp, error) {
	out := new(TemplateCreateResp)
	err := c.cc.Invoke(ctx, "/workflow.WorkflowTemplateApi/CreateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowTemplateApiClient) GetTemplate(ctx context.Context, in *TemplateGetReq, opts ...grpc.CallOption) (*TemplateGetResp, error) {
	out := new(TemplateGetResp)
	err := c.cc.Invoke(ctx, "/workflow.WorkflowTemplateApi/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowTemplateApiClient) UpdateTemplate(ctx context.Context, in *TemplateUpdateReq, opts ...grpc.CallOption) (*TemplateUpdateResp, error) {
	out := new(TemplateUpdateResp)
	err := c.cc.Invoke(ctx, "/workflow.WorkflowTemplateApi/UpdateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowTemplateApiClient) DeleteTemplate(ctx context.Context, in *TemplateDeleteReq, opts ...grpc.CallOption) (*TemplateDeleteResp, error) {
	out := new(TemplateDeleteResp)
	err := c.cc.Invoke(ctx, "/workflow.WorkflowTemplateApi/DeleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowTemplateApiClient) ExecuteTemplate(ctx context.Context, in *TemplateExecuteReq, opts ...grpc.CallOption) (*TemplateExecuteResp, error) {
	out := new(TemplateExecuteResp)
	err := c.cc.Invoke(ctx, "/workflow.WorkflowTemplateApi/ExecuteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowTemplateApiServer is the server API for WorkflowTemplateApi service.
// All implementations must embed UnimplementedWorkflowTemplateApiServer
// for forward compatibility
type WorkflowTemplateApiServer interface {
	// List Workflow Templates in a project
	ListTemplates(context.Context, *TemplateListReq) (*TemplateListResp, error)
	// create a new workflow template
	CreateTemplate(context.Context, *TemplateCreateReq) (*TemplateCreateResp, error)
	// get workflow template
	GetTemplate(context.Context, *TemplateGetReq) (*TemplateGetResp, error)
	// update an existing workflow template
	UpdateTemplate(context.Context, *TemplateUpdateReq) (*TemplateUpdateResp, error)
	// delete an existing workflow template
	DeleteTemplate(context.Context, *TemplateDeleteReq) (*TemplateDeleteResp, error)
	// execute a workflow template
	ExecuteTemplate(context.Context, *TemplateExecuteReq) (*TemplateExecuteResp, error)
	mustEmbedUnimplementedWorkflowTemplateApiServer()
}

// UnimplementedWorkflowTemplateApiServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowTemplateApiServer struct {
}

func (UnimplementedWorkflowTemplateApiServer) ListTemplates(context.Context, *TemplateListReq) (*TemplateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedWorkflowTemplateApiServer) CreateTemplate(context.Context, *TemplateCreateReq) (*TemplateCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedWorkflowTemplateApiServer) GetTemplate(context.Context, *TemplateGetReq) (*TemplateGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedWorkflowTemplateApiServer) UpdateTemplate(context.Context, *TemplateUpdateReq) (*TemplateUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedWorkflowTemplateApiServer) DeleteTemplate(context.Context, *TemplateDeleteReq) (*TemplateDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedWorkflowTemplateApiServer) ExecuteTemplate(context.Context, *TemplateExecuteReq) (*TemplateExecuteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTemplate not implemented")
}
func (UnimplementedWorkflowTemplateApiServer) mustEmbedUnimplementedWorkflowTemplateApiServer() {}

// UnsafeWorkflowTemplateApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowTemplateApiServer will
// result in compilation errors.
type UnsafeWorkflowTemplateApiServer interface {
	mustEmbedUnimplementedWorkflowTemplateApiServer()
}

func RegisterWorkflowTemplateApiServer(s grpc.ServiceRegistrar, srv WorkflowTemplateApiServer) {
	s.RegisterService(&WorkflowTemplateApi_ServiceDesc, srv)
}

func _WorkflowTemplateApi_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowTemplateApiServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.WorkflowTemplateApi/ListTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowTemplateApiServer).ListTemplates(ctx, req.(*TemplateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowTemplateApi_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowTemplateApiServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.WorkflowTemplateApi/CreateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowTemplateApiServer).CreateTemplate(ctx, req.(*TemplateCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowTemplateApi_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowTemplateApiServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.WorkflowTemplateApi/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowTemplateApiServer).GetTemplate(ctx, req.(*TemplateGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowTemplateApi_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowTemplateApiServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.WorkflowTemplateApi/UpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowTemplateApiServer).UpdateTemplate(ctx, req.(*TemplateUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowTemplateApi_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowTemplateApiServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.WorkflowTemplateApi/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowTemplateApiServer).DeleteTemplate(ctx, req.(*TemplateDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowTemplateApi_ExecuteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateExecuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowTemplateApiServer).ExecuteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflow.WorkflowTemplateApi/ExecuteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowTemplateApiServer).ExecuteTemplate(ctx, req.(*TemplateExecuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowTemplateApi_ServiceDesc is the grpc.ServiceDesc for WorkflowTemplateApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowTemplateApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.WorkflowTemplateApi",
	HandlerType: (*WorkflowTemplateApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTemplates",
			Handler:    _WorkflowTemplateApi_ListTemplates_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _WorkflowTemplateApi_CreateTemplate_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _WorkflowTemplateApi_GetTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _WorkflowTemplateApi_UpdateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _WorkflowTemplateApi_DeleteTemplate_Handler,
		},
		{
			MethodName: "ExecuteTemplate",
			Handler:    _WorkflowTemplateApi_ExecuteTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "template.proto",
}
