apiVersion: apps/v1
kind: Deployment
metadata:
  name: container-registry
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicaCount.containerRegistry }}
  selector:
    matchLabels:
      app: container-registry
  template:
    metadata:
      labels:
        app: container-registry
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: workflow-controller
      initContainers:
      - name: mongodb-wait
        image: {{ .Values.global.repository }}/mongo:5.0.3
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          while true; do
            mongosh --host $MONGODB_SERVICE_SERVICE_HOST -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --eval "rs.status()"
            if [ $? == "0" ]; then
              exit 0
            fi
            echo "waiting for mongodb to start"
            sleep 5
          done
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: password
        - name: MONGODB_SERVICE_SERVICE_HOST
          value: "workflow-configdb"
      containers:
      - name: container-registry
        image: {{ .Values.global.repository }}/orbiter-registry:{{ include "helper.imageTag" . }}
        imagePullPolicy: IfNotPresent
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        ports:
        - containerPort: 8090
          name: grpc
          protocol: TCP
        env:
        - name: MONGO_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: username
        - name: MONGO_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: password
        volumeMounts:
        - name: registry-config-vol
          mountPath: /opt/config.yml
          subPath: config.yml
      imagePullSecrets:
      - name: {{ .Release.Name }}-docker-registry-key
      dnsPolicy: ClusterFirst
      volumes:
      - name: registry-config-vol
        configMap:
          name: container-registry-config
